akka {
  actor {
    provider = cluster
  }

  remote {
    log-remote-lifecycle-events = off

    netty.tcp {
      # see: http://doc.akka.io/docs/akka/2.5/scala/remoting.html#akka-behind-nat-or-in-a-docker-container

      hostname = ${?HOST}           # external (logical) hostname - TO BE DISCOVERED
      hostname = ${?LIBPROCESS_IP}  # external (logical) hostname - TO BE DISCOVERED
      port = 2551
      port = ${?PORT_2551}          # external (logical) port - TO BE DISCOVERED

      bind-hostname = "0.0.0.0"    # internal (bind) hostname inside the docker container
      bind-port = 2551             # internal (bind) port inside the docker container
    }
  }

  discovery {
    method = marathon-api
    marathon-api {
      class = akka.discovery.marathon.MarathonApiSimpleServiceDiscovery

      # URL for getting list of apps from Marathon. Verified on OSS DC/OS 1.8, 1.9
      app-api-url = "http://192.168.99.100:8080/v2/apps"

      # The name of the akka management port - this cannot have underscores or dashes (env var name)
      app-port-name = "akkamgmthttp"

      # Used to find other apps running by Marathon. This will be passed as the label query string parameter
      # to the apps-api-url defined above.
      # `%s` will be replaced with the configured effective name, which defaults to the actor system name
      app-label-query = "ACTOR_SYSTEM_NAME==%s"
    }
  }

  management {
    http {
      # The hostname where the HTTP Server for Http Cluster Management will be started.
      # This defines the interface to use.
      # InetAddress.getLocalHost.getHostAddress is used not overriden or empty
      hostname = ${HOST}
      port = 19999
      port = ${?PORT_19999}

      bind-hostname = 0.0.0.0
      bind-port = 19999
    }

    cluster.bootstrap {

      # Configuration for the first phase of bootstraping, during which contact points are discovered
      # using the configured service discovery mechanism.
      contact-point-discovery {

        # Marathon API discovery uses effective-name when it's defined.
        #
        # Marathon API dicsovery uses this value to substitute to the query `app-label-query`
        #
        # It should match with application LABEL value declared in Marathon description.
        #
        effective-name= "marathon-api-docker-app-label"
      }

    }

  }
}

mesos-actor {
  master: "http://master.mesos:5050",
  master: "http://192.168.99.100:5050", # only for local testing
  master: ${?MESOS_MASTER} # used to overwrite the default value
  framework: {
    name: "mesos-actor-framework",
    role: "sample-role" # use resources allocated by the mesos-agents for this given role. See: http://mesos.apache.org/documentation/latest/roles/
  }
}


# Disable legacy metrics in akka-cluster.
# akka.cluster.metrics.enabled=off

# Enable metrics extension in akka-cluster-metrics.
# akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]
